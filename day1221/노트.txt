**MVC
	Model, View, Controller의 약자
	웹 어플리케이션을 비즈니스 로직(일처리를위한 자바문법), 프레젠테이션로직(HTML태그들), 데이터로 분리하는 디자인 패턴
	==> 유지보수에 용이함, 가독성이 좋음
	웹 애플리케이션에서는 일반적으로 애플리케이션을 비즈니스 로직, 프레젠테이션, 요청처리데이터로 분류한다.
	
	JSP 가독성이 떨어짐, 개발속도는 빠를 수 있다, 유지보수하기에 어려움이 따름
	
	
	model:
	-애플리케이션의 데이터와 비즈니스 로직을 담는 객체
	
	view:
	-사용자에게 모델의 정보를 보여주는 역할
		비즈니스 로직을 포함하지 않으며, 하나의 모델을 다양한 뷰에서사용
		
	controller:
	-모델과 뷰사이에 어떤 동작이 있을 때 조정하는 역할
	
	요청 Controller 서블릿
	처리	Model	자바객체
	view	view	JSP
	
---
Front Controller
	사용자의 모든 요청을 받아들이는 Controller를 말하며
	사용자가 어떠한 서비스를 원하는지 파악하여
	일처리를 위한 모델을 결정하고 처리된 결과에 따른
	viewPage를 결정하는 Controller를 말한다.
	
	사용자가 어떤 서비스를 요청하더라도 모든 요청에 대한 처리를 하는 Controller
	
	
--

서비스 명이 많아지게 되면 일일이 if문으로 표현하는 것은 번거로운 일이다.
==>map을 이용하여 key에는 서비스명, value에는 일처리담당 객체를 등록
	ex) map.put("listGoods.do", new ListGoodsAction());
		map.put("insertGoods.do", new InsertGoodsAction());
		map.put("insertGoodsOK.do", new InsertGoodsOKAction());
		
		String cmd = "listGoods.do";
		SistAction action = map.get(cmd);
		
		action.proRequest(request, response);
		
		
	-0---
	
    public SistController() {
        super();
        map = new HashMap<String, SistAction>();
        map.put("listGoods.do", new ListGoodsAction());
        map.put("insertGoods.do", new InsertGoodsAction());
        map.put("insertGoodsOK.do", new InsertGoodsOKAction());
        map.put("detailGoods.do", new DetailGoodsAction());
    }		
	
	위와 같이 map에 일일이 서비스명과 일처리 담당을 위한 객체를 생성하여 등록
	
	만약 새로운 서비스가 추가될때마다 클래스를 수정해야하는 것은 번거로운 일
	
	서비스명과 일처리 담당객체를 설정하는 설정파일을 이용한 것으로 수정
	
	properties 작성시
	클래스명과 서비스명에 공백이 존재해서는 안됨
	
		